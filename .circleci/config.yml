version: 2.1

orbs:
  slack: circleci/slack@3.4.2

jobs:
  build:
    machine: true
    steps:
      - checkout
      - restore_cache:
          key: docker-{{checksum ".circleci/config.yml"}}-{{checksum "docker-compose.yml"}}-{{checksum "Dockerfile"}}
          paths: ~/images.tar
      - run:
          name:
          command: |
            echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> $BASH_ENV
            if [ ! -f ~/images.tar ];then
              docker-compose build
              docker save $(docker images -q) -o ~/images.tar
            fi
      - save_cache:
          key: docker-{{checksum ".circleci/config.yml"}}-{{checksum "docker-compose.yml"}}-{{checksum "Dockerfile"}}
          paths: ~/images.tar
  test:
    machine: true
    steps:
      - checkout
      - restore_cache:
          key: docker-{{checksum ".circleci/config.yml"}}-{{checksum "docker-compose.yml"}}-{{checksum "Dockerfile"}}
          paths: ~/images.tar
      - run: docker load -i ~/images.tar

      - run:
          name: set aws credential to env
          command: |
            echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> $BASH_ENV

      - run: docker-compose run tf /bin/bash -c "/var/tmp/terraform fmt -recursive /tf"
      - run: docker-compose run tf /bin/bash -c "cd /tf/terraform/network/env/dev && /var/tmp/terraform init"
      - run: docker-compose run tf /bin/bash -c "cd /tf/terraform/network/env/dev && /var/tmp/terraform plan"
      - slack/status:
          webhook: ${SLACK_WEBHOOK}

workflows:
  test:
    jobs:
      - build
      - test:
         requires:
           - build
